generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AuditType {
  BENEFICIARY_CREATION
  BENEFICIARY_READ
  BENEFICIARY_UPDATE
  BENEFICIARY_DELETION
  SOLICITATION_CREATION
  SOLICITATION_UPDATE
  SOLICITATION_DELETION
  SPECIALITY_CREATION
  SPECIALITY_UPDATE
  SPECIALITY_DELETION
  USER_CREATION
  USER_AUTHENTICATION
  USER_UPDATE
  USER_DELETION
  SYSTEM_ERROR
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

model Beneficiary {
  id             String   @id @default(uuid())
  name           String   @db.VarChar(100)
  birthDate      DateTime
  gender         Gender
  generalRecord  String?  @unique @db.VarChar(15)
  personalRecord String?  @unique @db.VarChar(11)
  healthCard     String?  @unique @db.VarChar(15)
  motherName     String?  @db.VarChar(100)
  referee        String?  @db.VarChar(100)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  comorbidities Comorbidity[]
  responsible   User           @relation(fields: [responsibleId], references: [document])
  responsibleId String
  address       Address?
  phoneNumbers  PhoneNumber[]
  voterCard     VoterCard?
  solicitations Solicitation[]
}

model Comorbidity {
  id   String @id @default(uuid())
  name String @db.VarChar(150)

  beneficiary   Beneficiary @relation(fields: [beneficiaryId], references: [id], onDelete: Cascade)
  beneficiaryId String
}

model Solicitation {
  id        String   @id @default(uuid())
  date      DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  beneficiary   Beneficiary   @relation(fields: [beneficiaryId], references: [id])
  beneficiaryId String        @unique
  responsible   User          @relation(fields: [responsibleId], references: [document])
  responsibleId String        @unique
  appointments  Appointment[]
}

model Speciality {
  id   String @id @default(uuid())
  name String @db.VarChar(150)

  appointments Appointment[]
}

model Appointment {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  solicitation   Solicitation @relation(fields: [solicitationId], references: [id])
  solicitationId String
  speciality     Speciality   @relation(fields: [specialityId], references: [id])
  specialityId   String
}

enum Role {
  ADMINISTRATOR
  EMPLOYEE
}

model User {
  name      String   @db.VarChar(100)
  document  String   @id @unique @db.VarChar(11)
  passWord  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  role          Role           @default(EMPLOYEE)
  solicitations Solicitation[]
  beneficiaries Beneficiary[]
}

enum State {
  AC
  AL
  AP
  AM
  BA
  CE
  DF
  ES
  GO
  MA
  MT
  MS
  MG
  PA
  PB
  PR
  PE
  PI
  RJ
  RN
  RS
  RO
  RR
  SC
  SP
  SE
  TO
}

model Address {
  id           String  @id @default(uuid())
  space        String? @db.VarChar(100)
  number       String? @db.VarChar(10)
  complement   String? @db.VarChar(50)
  neighborhood String? @db.VarChar(50)
  city         String? @db.VarChar(50)
  state        State?
  zip          String? @db.VarChar(8)

  beneficiary   Beneficiary? @relation(fields: [beneficiaryId], references: [id], onDelete: Cascade)
  beneficiaryId String?      @unique
}

model PhoneNumber {
  id     String @id @default(uuid())
  number String @db.VarChar(13)

  beneficiary   Beneficiary @relation(fields: [beneficiaryId], references: [id], onDelete: Cascade)
  beneficiaryId String
}

model VoterCard {
  id           String  @id @default(uuid())
  registration String? @db.VarChar(12)
  section      String? @db.VarChar(4)
  zone         String? @db.VarChar(4)

  beneficiary   Beneficiary? @relation(fields: [beneficiaryId], references: [id], onDelete: Cascade)
  beneficiaryId String?      @unique
}
